aggregates:
  - name: "stock"
    interval: 60
    get_query: |
      SELECT
        CASE 'U' WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
        @version + 1 as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(t.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            t.twr_gidnumer as sku_id,
            t.Twr_Kod sku_code,
            JSON_QUERY((
                SELECT
                    x.Dst_Cecha as sku_batch_number,
                    m.MAG_Kod sku_warehouse_code,
                    m.MAG_Nazwa sku_warehouse_name,
                    z.TwZ_IlSpr sku_stock_qty
                FROM CDN.TwrZasoby z
                    JOIN CDN.Dostawy x ON x.Dst_GidNumer = z.TwZ_DstNumer AND x.Dst_GidTyp = z.TwZ_DstTyp
                    JOIN CDN.Magazyny m ON z.TwZ_MagNumer = m.MAG_GIDNumer
                WHERE z.TwZ_TwrNumer = t.Twr_GIDNumer
                    AND z.TwZ_MagNumer IN (1, 14, 19, 23, 29, 30, 35, 70, 81, 83, 87, 88)
                FOR JSON PATH
            )) AS sku_stock
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload 
      FROM CDN.TwrKarty t
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2
          AND t.Twr_Archiwalny = 0

  - name: "customer"
    interval: 60
    get_query: |
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Knt_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
              c.Knt_GidNumer as customer_id
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.KntKarty, @version) AS c
      WHERE c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL

      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Knt_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  CASE k.knt_archiwalny WHEN 0 THEN 1 ELSE 0 END AS status,
                  c.knt_gidnumer as customer_id,
                  k.knt_akronim as customer_code,
                  UPPER(COALESCE(NULLIF(TRIM(CONCAT_WS(' ', p.prc_imie1, p.prc_nazwisko)), ''), 'N/D')) AS customer_service_owner,
                  e.KGD_Kod as customer_sales_area,
                  UPPER(TRIM(CONCAT_WS(' ', k.knt_nazwa1, k.knt_nazwa2, k.knt_nazwa3))) AS customer_name,
                  TRIM(SUBSTRING(n.naz_nazwa,1,10)) AS customer_price_list,
                  k.knt_rabat AS customer_discount,
                  k.Knt_LimitOkres AS customer_payment_terms,
                  k.knt_nipprefiks as customer_tax_prefix,
                  COALESCE(k.knt_nipe, k.knt_nip) AS customer_tax_number,
                  k.knt_ulica AS customer_address_street,
                  k.knt_kraj AS customer_address_country,
                  k.knt_kodp customer_address_zip,
                  k.knt_miasto AS customer_address_city,
                  k.knt_telefon1 AS customer_phone_number,
                  k.knt_telefon2 AS customer_fax_number,
                  k.knt_email AS customer_email,
                  JSON_QUERY((
                      SELECT
                      a.kna_akronim as address_code,
                      CASE
                          WHEN k.knt_knanumer = a.KnA_GIDNumer THEN 'AKTUALNY'
                          WHEN a.kna_wysylkowy = 1 THEN 'WYSYŁKOWY'
                          ELSE 'INNY'
                      END AS address_type,
                      UPPER(a.kna_ulica) as address_street,
                      UPPER(a.kna_kraj) as address_country,
                      UPPER(a.kna_kodp) as address_zip,
                      UPPER(a.kna_miasto) as address_city,
                      UPPER(a.kna_wojewodztwo) as address_district,
                      a.kna_telefon1 as address_phone1,
                      a.kna_telefon2 as address_phone2,
                      a.kna_fax as address_fax,
                      a.kna_modem as address_mode,
                      a.kna_telex as address_gsm,
                      a.kna_email as address_email
                      FROM CDN.KntAdresy a
                      WHERE a.KnA_KntNumer = k.Knt_GIDNumer AND a.kna_dataarc = 0
                      FOR JSON PATH
                  )) AS addresses,
                  JSON_QUERY((
                      SELECT
                          o.kns_kntlp as contact_id,
                          o.kns_nazwa as contact_name,
                          o.kns_stanowisko as contact_position,
                          o.kns_email as contact_email,
                          o.kns_telefon as contact_phone,
                          o.kns_telefonk as contact_mobile
                      FROM CDN.KntOsoby o
                      WHERE k.Knt_GIDNumer = o.KnS_KntNumer AND o.kns_archiwalny = 0
                      FOR JSON PATH
                  )) AS customer_contacts,
                  JSON_QUERY((
                      SELECT
                          o.klk_id as credit_id,
                          DATEADD(DAY, o.klk_dataod, '1800-12-28') as credit_valid_from,
                          DATEADD(DAY, o.klk_datado, '1800-12-28') as credit_valid_to,
                          o.klk_maxlimitwart as credit_value,
                          o.klk_waluta as credit_currency
                      FROM CDN.KntLimityK o
                      WHERE k.Knt_GIDNumer = o.Klk_KntNumer
                      AND o.klk_datado > DATEDIFF(DAY, '1800-12-28', GETDATE())
                      FOR JSON PATH
                  )) AS customer_credits
                  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
              )) AS payload
      FROM CHANGETABLE(CHANGES CDN.KntKarty, @version) AS c
          JOIN CDN.KntKarty AS k ON c.knt_gidnumer = k.knt_gidnumer
          JOIN CDN.KntGrupyDom d ON k.knt_gidnumer = d.kgd_gidnumer AND d.kgd_gidtyp = k.knt_gidtyp
          JOIN CDN.KntGrupyDom e ON d.kgd_grotyp = e.kgd_gidtyp AND d.kgd_gronumer = e.kgd_gidnumer
          LEFT JOIN CDN.KntOpiekun o ON k.knt_gidnumer = o.kto_kntnumer AND k.knt_gidtyp = o.kto_knttyp
          LEFT JOIN CDN.PrcKarty p ON o.kto_prcnumer = p.prc_gidnumer
          LEFT JOIN CDN.Nazwy n ON k.knt_cena = n.naz_gidlp AND n.naz_gidtyp = 64

  - name: "sku"
    interval: 60
    get_query: |
      SELECT
        CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
        c.SYS_CHANGE_VERSION as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
            c.Twr_GidNumer as sku_id
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrKarty, @version) AS c
      WHERE c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL

      SELECT
        CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END AS change_operation,
        c.SYS_CHANGE_VERSION as change_version,
        CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Twr_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
        JSON_QUERY((
          SELECT
              CASE t.twr_archiwalny WHEN 0 THEN 1 ELSE 0 END AS status,
              c.Twr_GidNumer as sku_id,
              UPPER(t.twr_kod) as sku_code,
              UPPER(t.twr_nazwa) as sku_name,
              f.TGD_Kod as sku_group,
              e.TGD_Kod as sku_subgroup,
              t.twr_ean as sku_eancode,
              UPPER(t.twr_jm) as sku_unitprefix
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrKarty, @version) AS c
          JOIN CDN.TwrKarty t ON c.Twr_GIDNumer = t.Twr_GIDNumer
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2

  - name: "pricelist"
    interval: 60
    get_query: |
      SELECT
          CASE a.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END AS change_operation,
          a.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.TwC_TwrNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  c.twc_tcnid as pricelist_id,
                  c.twc_id as pricelist_price_id,
                  t.Twr_GIDNumer as pricelist_sku_id,
                  t.TwR_Kod as pricelist_sku_code,
                  SUBSTRING(x.naz_nazwa,1,10) as pricelist_name,
                  c.twc_waluta as pricelist_currency,
                  c.twc_wartosc as pricelist_price,
                  SUBSTRING(x.naz_nazwa,11,1) AS pricelist_net_gross_flag
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TwrCeny, @version) AS a
          JOIN CDN.TwrCeny c ON a.TwC_ID = c.TwC_ID
          JOIN CDN.TwrCenyNag n ON c.TwC_TcNId = n.TCN_Id
          JOIN CDN.TwrKarty t ON c.TwC_TwrNumer = t.Twr_GIDNumer
          JOIN CDN.Nazwy x ON n.TCN_RodzajCeny = x.Naz_GIDLp AND x.Naz_GIDTyp = 64
          JOIN CDN.TwrGrupyDom d ON t.Twr_GIDNumer = d.TGD_GIDNumer and t.Twr_GIDTyp = d.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom e ON d.TGD_GrONumer = e.TGD_GIDNumer and d.TGD_GrOTyp = e.TGD_GIDTyp
          JOIN CDN.TwrGrupyDom f ON e.TGD_GrONumer = f.TGD_GIDNumer and e.TGD_GrOTyp = f.TGD_GIDTyp
      WHERE 1=1
          AND n.tcn_stan = 5
          AND f.TGD_GrOTyp = -16
          AND f.TGD_GrONumer = 2
          AND t.Twr_Archiwalny = 0

  - name: "order"
    interval: 60
    get_query: |
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Zan_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  c.Zan_GidNumer as order_id
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.ZamNag, @version) AS c
      WHERE 1=1
          AND c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL 

      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Zan_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  n.zan_gidnumer AS order_id,
                  ('ZS-' + CONCAT(n.zan_zamnumer, '/', n.zan_zamrok, '/', n.zan_zamseria)) AS order_reference_number,
                  k.knt_gidnumer AS order_customer_id,
                  k.knt_akronim AS order_customer_code,
                  m.mag_kod AS order_warehouse_code,
                  case n.zan_stan 
                  WHEN 0 THEN 'ZAPYTANIE'
                  WHEN 1 THEN 'OFERTA'
                  WHEN 2 THEN 'NIEPOTWIERDZONE'
                  WHEN 3 THEN 'POTWIERDZONE'
                  WHEN 4 THEN 'ZAAKCEPTOWANE'
                  WHEN 5 THEN 'W RALIZACJI'
                  WHEN 32 THEN 'ANULOWANE'
                  WHEN 16 THEN 'ARCHIWUM'
                  WHEN 35 THEN 'ANULOWANE POTWIERDZONE'
                  WHEN 19 THEN 'ODRZUCONE'
                  WHEN 21 THEN 'ZREALIZOWANE'
                  WHEN 51 THEN 'ZAMKNIĘTE POTWIERDZONE'
                  WHEN 53 THEN 'ZAMKNIĘTE W REALIZACJI'
                  end as order_status,
                  CAST(DATEADD(DAY, n.zan_datawystawienia, '18001228') AS DATE) AS order_date,
                  CAST(DATEADD(DAY, n.zan_datarealizacji, '18001228') AS DATE) AS order_fulfillment_date,
                  n.zan_krajprzezwys as order_target_country,
                  CASE n.zan_kodrodzajutransportu
                      WHEN 1 THEN 'TRANSPORT MORSKI'
                      WHEN 2 THEN 'TRANSPORT KOLEJOWY'
                      WHEN 3 THEN 'TRANSPORT DROGOWY'
                      WHEN 4 THEN 'TRANSPORT LOTNICZY'
                      ELSE 'TRANSPORT INNY'
                  END AS order_transport_type,
                  UPPER(n.zan_spdostawy) as order_delivery_type,
                  UPPER(n.zan_formanazwa) as order_payment_type,
                  n.zan_terminplatnosci as order_payment_term,
                  n.zan_rabat as order_base_discount,
                  n.zan_waluta as order_currency,
                  n.zan_flaganb as order_net_gross_flag,
                  n.zan_realwcalosci as order_no_split,
                  JSON_QUERY((
                      SELECT
                          e.zae_gidlp AS order_line_id,
                          e.zae_twrnumer AS order_line_sku_id,
                          e.zae_twrkod AS order_line_sku_code,
                          e.zae_flagavat AS order_line_vat_flag,
                          e.zae_ilosc AS order_line_qty,
                          e.zae_rabat AS order_line_discount,
                          e.zae_wartoscporabacie AS order_line_value,
                          e.zae_waluta AS order_line_currency_code,
                          e.zae_stawkapod AS order_line_tax_rate,
                          e.zae_cenakatalogowa AS order_line_sku_base_price,
                          e.zae_cenauzgodniona AS order_line_sku_calculated_price
                      FROM cdn.zamelem e
                          JOIN cdn.magazyny m ON e.zae_magnumer = m.mag_gidnumer
                      WHERE e.zae_gidnumer = n.zan_gidnumer
                      FOR JSON PATH
                  )) AS order_lines
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.ZamNag, @version) AS c
          JOIN CDN.ZamNag n ON c.zan_gidnumer = n.zan_gidnumer
          JOIN CDN.KntKarty k ON n.zan_kntnumer = k.knt_gidnumer
          JOIN CDN.Magazyny m ON n.zan_magnumer = m.mag_gidnumer
      WHERE 1=1
          AND n.zan_zamtyp = 1280

  - name: "priceterm"
    interval: 60
    get_query: |
      WITH node_descendants (
          original_node_gidtyp,
          original_node_gidnumer,
          current_gidtyp,
          current_gidnumer
      ) AS (
          -- Anchor member: Start with all groups that are NODES
          SELECT
          g.tgd_gidtyp,
          g.tgd_gidnumer,
          g.tgd_gidtyp,
          g.tgd_gidnumer
          FROM cdn.twrgrupydom g
          WHERE g.tgd_gidtyp = -16 -- Only start traversal from groups that are nodes

          UNION ALL

          -- Recursive member: Find children of the current item in the path
          SELECT
          nd.original_node_gidtyp,
          nd.original_node_gidnumer,
          child.tgd_gidtyp,
          child.tgd_gidnumer
          FROM cdn.twrgrupydom child
          JOIN node_descendants nd ON child.tgd_grotyp = nd.current_gidtyp
              AND child.tgd_gronumer = nd.current_gidnumer
          WHERE nd.current_gidtyp = -16
      ),
      effective_leaves AS (
          -- Case 1: For original NODES (-16), find all their descendant LEAVES (16)
          SELECT
              nd.original_node_gidtyp AS input_gidtyp,
              nd.original_node_gidnumer AS input_gidnumer,
              nd.current_gidtyp AS leaf_gidtyp,
              nd.current_gidnumer AS leaf_gidnumer
          FROM node_descendants nd
          WHERE nd.current_gidtyp = 16 -- Filter for paths in node_descendants that end in a LEAF

          UNION ALL

          -- Case 2: For items that are LEAVES (16) themselves in cdn.twrgrupydom
          SELECT
              g.tgd_gidtyp AS input_gidtyp,
              g.tgd_gidnumer AS input_gidnumer,
              g.tgd_gidtyp AS leaf_gidtyp,
              g.tgd_gidnumer AS leaf_gidnumer
          FROM cdn.twrgrupydom g
          WHERE g.tgd_gidtyp = 16 -- Select all groups that are defined as leaves
      ),
      terms AS (
          SELECT
              k.kpr_kntnumer as customer_id,
              e.leaf_gidnumer as sku_id,
              tk.twr_kod as sku_code,
              t.tpr_wartosc as price_value,
              t.tpr_waluta as price_currency,
              t.tpr_flaganb as price_type,
              --the twrtyp +16 indicate that the promotion was set up on the leaf
              --the leaf promotion has priority over node promotion(-16)
              ROW_NUMBER() OVER (PARTITION BY e.leaf_gidnumer ORDER BY t.tpr_twrtyp DESC) AS row_num
          FROM cdn.kntpromocje k
              JOIN cdn.prmkarty p ON k.kpr_prmid = p.prm_id
              JOIN cdn.twrpromocje t ON p.prm_id = t.tpr_prmid
              JOIN effective_leaves e ON t.tpr_twrtyp = e.input_gidtyp AND t.tpr_twrnumer = e.input_gidnumer
              JOIN cdn.TwrKarty tk on e.leaf_gidnumer = tk.twr_gidnumer
          WHERE 1=1
              AND p.prm_stan = 1
              AND t.tpr_aktywny = 1
              AND t.tpr_typ = 3
      )
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.Knt_GidNumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  c.knt_gidnumer as priceterm_customer_id,
                  k.knt_akronim as priceterm_cusomer_code,
                  t.sku_id as priceterm_sku_id,
                  t.sku_code as priceterm_sku_code,
                  t.price_value as priceterm_price,
                  t.price_currency as priceterm_currency,
                  t.price_type as priceterm_net_gross_flag
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.KntKarty, @version) AS c
          JOIN CDN.KntKarty k on c.knt_gidnumer = k.knt_gidnumer
          JOIN terms t ON t.customer_id = k.knt_gidnumer

  - name: "invoice"
    interval: 60
    get_query: |
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.trn_gidnumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  c.trn_gidnumer as invoice_id
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraNag, @version) AS c
      WHERE 1=1
          AND c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL

      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.trn_gidnumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
          SELECT
            n.trn_gidnumer AS invoice_id,
            n.trn_kntnumer AS invoice_customer_id,
            k.knt_akronim AS invoice_customer_code,
            CASE n.trn_stan 
              WHEN 1 THEN 'W BUFORZE'
              WHEN 2 THEN 'W BUFORZE PO REEDYCJI'
              WHEN 3 THEN 'ZAMKNIĘTY NIE ROZLICZONY'
              WHEN 4 THEN 'W TRAKCIE ROZLICZENIA'
              WHEN 5 THEN 'ZAMKNIĘTY'
              WHEN 6 THEN 'ANULOWANY'
              ELSE 'INNY'
            END AS invoice_status,
            o.ob_skrot + '-' + CAST(n.trn_trnnumer AS VARCHAR) + '/' + CAST(RIGHT(n.trn_trnrok, 2) AS VARCHAR) + '/' + n.trn_trnseria AS invoice_reference_number,
            CAST(DATEADD(DAY, n.trn_data2, '18001228') AS DATE) AS invoice_date,
            CAST(DATEADD(DAY, n.trn_data3, '18001228') AS DATE) AS invoice_sales_date,
            n.trn_waluta AS invoice_currency,
            n.trn_formanazwa AS invoice_payment_method,
            n.trn_nettor AS invoice_net_value,
            n.trn_vatr AS invoice_tax_value,
                  JSON_QUERY((
                      SELECT
                          e.tre_gidlp AS line_id,
                          e.tre_twrnumer AS sku_id,
                          e.tre_twrkod AS invoice_sku_code,
                          e.tre_flaganb AS invoice_net_gross_flag,
                          e.tre_flagavat AS invoice_vat_flag,
                          e.tre_ilosc AS invoice_line_qty,
                          e.tre_waluta AS invoice_currency_code,
                          e.tre_wartoscporabacie AS invoice_line_value_currency,
                e.tre_ksiegowanetto as invoice_line_net_value_pln,
                e.tre_kosztksiegowy as invoice_line_cost_pln,
                          e.tre_stawkapod AS invoice_line_tax_rate,
                          e.tre_ksiegowabrutto AS invoice_line_gross_value_pln
                      FROM cdn.traelem e
                      WHERE e.tre_gidnumer = n.trn_gidnumer
                      FOR JSON PATH
                  )) AS invoice_lines
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraNag, @version) AS c
        JOIN CDN.TraNag n ON c.trn_gidnumer = n.trn_gidnumer
        JOIN CDN.Obiekty o ON n.trn_gidtyp = o.ob_gidtyp
        JOIN CDN.KntKarty k ON n.trn_kntnumer = k.knt_gidnumer
      WHERE 1=1
        AND n.trn_gidtyp IN (2033,2041,2034,2042,2037,2045)
        AND dateadd(day, n.trn_data3, '18001228') >= '20240101'

      UNION ALL

      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', CAST(c.trn_gidnumer AS VARCHAR(40))), 2) AS aggregate_key,
          JSON_QUERY((
          SELECT
            n.trn_gidnumer AS invoice_id,
            n.trn_kntnumer AS invoice_customer_id,
            k.knt_akronim AS invoice_customer_code,
            CASE n.trn_stan 
              WHEN 1 THEN 'W BUFORZE'
              WHEN 2 THEN 'W BUFORZE PO REEDYCJI'
              WHEN 3 THEN 'ZAMKNIĘTY NIE ROZLICZONY'
              WHEN 4 THEN 'W TRAKCIE ROZLICZENIA'
              WHEN 5 THEN 'ZAMKNIĘTY'
              WHEN 6 THEN 'ANULOWANY'
              ELSE 'INNY'
            END AS invoice_status,
            o.ob_skrot + '-' + CAST(n1.trn_trnnumer AS VARCHAR) + '/' + CAST(RIGHT(n1.trn_trnrok, 2) AS VARCHAR) + '/' + n1.trn_trnseria AS invoice_reference_number,
            CAST(DATEADD(DAY, n.trn_data2, '18001228') AS DATE) AS invoice_date,
            CAST(DATEADD(DAY, n.trn_data3, '18001228') AS DATE) AS invoice_sales_date,
            n.trn_waluta AS invoice_currency,
            n.trn_formanazwa AS invoice_payment_method,
            n.trn_nettor AS invoice_net_value,
            n.trn_vatr AS invoice_tax_value,
                  JSON_QUERY((
                      SELECT
                          e.tre_gidlp AS line_id,
                          e.tre_twrnumer AS sku_id,
                          e.tre_twrkod AS invoice_sku_code,
                          e.tre_flaganb AS invoice_net_gross_flag,
                          e.tre_flagavat AS invoice_vat_flag,
                          e.tre_ilosc AS invoice_line_qty,
                          e.tre_waluta AS invoice_currency_code,
                          e.tre_wartoscporabacie AS invoice_line_value_currency,
                          e.tre_ksiegowanetto as invoice_line_net_value_pln,
                          e.tre_kosztksiegowy as invoice_line_cost_pln,
                          e.tre_stawkapod AS invoice_line_tax_rate,
                          e.tre_ksiegowabrutto AS invoice_line_gross_value_pln
                      FROM cdn.traelem e
                      WHERE e.tre_gidnumer = n.trn_gidnumer
                      FOR JSON PATH
                  )) AS invoice_lines
          FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraNag, @version) AS c
        JOIN CDN.TraNag n ON c.trn_gidnumer = n.trn_gidnumer
        JOIN CDN.TraNag n1 ON n1.trn_gidnumer = n.trn_spinumer AND n1.trn_gidtyp = n.trn_spityp
        JOIN CDN.Obiekty o ON n1.trn_gidtyp = o.ob_gidtyp
        JOIN CDN.KntKarty k ON n.trn_kntnumer = k.knt_gidnumer
      WHERE 1=1
        AND n.trn_gidtyp IN (2001, 2005, 2009, 2013)
        AND dateadd(day, n.trn_data3, '18001228') >= '20240101'

  - name: "payment"
    interval: 60
    get_query: |
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', 
              ISNULL(CAST(c.trp_gidtyp AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidnumer AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidlp AS VARCHAR(40)), '')
          ), 2) AS aggregate_key,
          JSON_QUERY((
              SELECT
                  CONVERT(BIGINT, (c.trp_gidnumer))*10000 + c.trp_gidlp AS payment_id
              FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
          )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraPlat, @version) AS c
      WHERE 1=1
          AND c.SYS_CHANGE_OPERATION = 'D'

      UNION ALL

      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', 
              ISNULL(CAST(c.trp_gidtyp AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidnumer AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidlp AS VARCHAR(40)), '')
          ), 2) AS aggregate_key,
          JSON_QUERY((
            SELECT
              CONVERT(BIGINT, (p.trp_gidnumer))*10000 + p.trp_gidlp AS payment_id,
              n.trn_kntnumer AS payment_source_customer_id,
              r.knt_akronim AS payment_source_customer_code,
              p.trp_kntnumer AS pyament_target_customer_id,
              k.knt_akronim AS payment_target_customer_code,
              CASE n.trn_stan 
                WHEN 1 THEN 'W BUFORZE'
                WHEN 2 THEN 'W BUFORZE PO REEDYCJI'
                WHEN 3 THEN 'ZAMKNIĘTY NIE ROZLICZONY'
                WHEN 4 THEN 'W TRAKCIE ROZLICZENIA'
                WHEN 5 THEN 'ZAMKNIĘTY'
                WHEN 6 THEN 'ANULOWANY'
              END AS payment_document_status,
              o.ob_skrot + '-' + CAST(n.trn_trnnumer AS VARCHAR) + '/' + CAST(RIGHT(n.trn_trnrok, 2) AS VARCHAR) + '/' + n.trn_trnseria AS payment_reference,
              CAST(DATEADD(DAY, n.trn_data3, '18001228') AS DATE) AS payment_create_date,
              CAST(DATEADD(DAY, p.trp_termin, '18001228') AS DATE) AS payment_due_date,
              p.trp_waluta AS payment_currency,
              CAST(p.trp_kursl/p.trp_kursm AS DECIMAL(15,2)) AS payment_currency_rate,
              CASE WHEN p.trp_typ = 1 THEN -p.trp_kwota ELSE p.trp_kwota END AS payment_total_value,
              CASE WHEN p.trp_typ = 1 THEN -p.trp_pozostaje ELSE p.trp_pozostaje END AS payment_remaining_value,
              CASE p.trp_typ
                WHEN 1 THEN 'ZOBOWIĄZANIE'
                WHEN 2 THEN 'NALEŻNOŚĆ'
              END AS payment_type,
              CASE p.trp_rozliczona
                WHEN 0 THEN 'NIE ROZLICZONA'
                WHEN 1 THEN 'ROZLICZONA'
                WHEN 2 THEN 'NIE ROZLICZAJ'
              END AS payment_status
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraPlat, @version) AS c
        JOIN CDN.traplat p ON c.trp_gidtyp = p.trp_gidtyp AND c.trp_gidnumer = p.trp_gidnumer AND c.trp_gidlp = p.trp_gidlp
        JOIN CDN.tranag n ON n.trn_gidtyp = p.trp_gidtyp AND n.trn_gidnumer = p.trp_gidnumer
        JOIN CDN.Obiekty o ON n.trn_gidtyp = o.ob_gidtyp
        JOIN CDN.KntKarty r ON n.trn_kntnumer = r.knt_gidnumer
        JOIN CDN.KntKarty k ON k.knt_gidnumer = p.trp_kntnumer
      WHERE
        n.trn_gidtyp IN (2033,2041,2034,2042,2037,2045)

      UNION ALL
      SELECT
          CASE c.SYS_CHANGE_OPERATION WHEN 'U' THEN 'updated' WHEN 'D' THEN 'deleted' WHEN 'I' THEN 'inserted' ELSE 'modified' END as change_operation,
          c.SYS_CHANGE_VERSION as change_version,
          CONVERT(VARCHAR(32), HASHBYTES('MD5', 
              ISNULL(CAST(c.trp_gidtyp AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidnumer AS VARCHAR(40)), '') + '|' + 
              ISNULL(CAST(c.trp_gidlp AS VARCHAR(40)), '')
          ), 2) AS aggregate_key,
          JSON_QUERY((
            SELECT
              CONVERT(BIGINT, (p.trp_gidnumer))*10000 + p.trp_gidlp AS payment_id,
              k.knt_gidnumer AS payment_source_customer_id,
              k.knt_akronim AS payment_source_customer_code,
              k.knt_gidnumer AS pyament_target_customer_id,
              k.knt_akronim AS payment_target_customer_code,
              '' AS payment_document_status,
              bos.bos_numerdokumentu AS payment_reference,
              CAST(DATEADD(DAY, bos.bos_data, '18001228') AS DATE) AS payment_create_date,
              CAST(DATEADD(DAY, p.trp_termin, '18001228') AS DATE) AS payment_due_date,
              p.trp_waluta AS payment_currency,
              CAST(p.trp_kursl/p.trp_kursm AS DECIMAL(15,2)) AS payment_currency_rate,
              CASE WHEN p.trp_typ = 1 THEN -p.trp_kwota ELSE p.trp_kwota END AS payment_total_value,
              CASE WHEN p.trp_typ = 1 THEN -p.trp_pozostaje ELSE p.trp_pozostaje END AS payment_remaining_value,
              CASE p.trp_typ
                WHEN 1 THEN 'ZOBOWIĄZANIE'
                WHEN 2 THEN 'NALEŻNOŚĆ'
              END AS payment_type,
              CASE p.trp_rozliczona
                WHEN 0 THEN 'NIE ROZLICZONA'
                WHEN 1 THEN 'ROZLICZONA'
                WHEN 2 THEN 'NIE ROZLICZAJ'
              END AS payment_status
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        )) AS payload
      FROM CHANGETABLE(CHANGES CDN.TraPlat, @version) AS c
        JOIN CDN.traplat p ON c.trp_gidtyp = p.trp_gidtyp AND c.trp_gidnumer = p.trp_gidnumer AND c.trp_gidlp = p.trp_gidlp
        JOIN CDN.BilansOtwarciaElem AS bo ON p.trp_gidnumer = bo.boe_gidnumer AND p.trp_gidtyp = bo.boe_gidtyp AND p.trp_gidlp = bo.boe_gidlp AND bo.boe_gidtyp = 7680 AND bo.boe_gidnumer IN (6, 11, 17)
        JOIN CDN.BilansOtwarciaSelem AS bos ON bo.boe_gidnumer = bos.bos_trpnumer AND bo.boe_gidtyp = bos.bos_trptyp AND bo.boe_gidlp = bos.bos_trplp
        JOIN CDN.KntKarty k ON k.knt_gidnumer = p.trp_kntnumer
      WHERE ( bos.bos_numerdokumentu LIKE 'FS%'
          OR bos.bos_numerdokumentu LIKE 'PA%'
          OR bos.bos_numerdokumentu LIKE 'FSE%'
          OR bos.bos_numerdokumentu LIKE 'FSK%'
          OR bos.bos_numerdokumentu LIKE 'PAK%'
          OR bos.bos_numerdokumentu LIKE 'FKE%')